import { v4 as uuidv4 } from 'uuid';
import type { CreateUserInput } from '../../src/models/User';
import type { CreateSessionInput } from '../../src/models/Session';

/**
 * Test Data Factory for Authentication
 *
 * Generates consistent, valid test data for users and sessions
 * Prevents duplication and ensures OWASP password requirements met
 */

/**
 * Generate a unique test user with valid credentials
 * All generated passwords meet OWASP requirements:
 * - Minimum 12 characters
 * - At least one uppercase letter
 * - At least one lowercase letter
 * - At least one number
 */
export class UserFactory {
  /**
   * Create a test user with unique credentials
   */
  static createTestUser(overrides?: Partial<CreateUserInput>): CreateUserInput {
    const uniqueId = uuidv4().slice(0, 8);

    return {
      username: `testuser_${uniqueId}`,
      email: `test_${uniqueId}@example.com`,
      passwordHash: '', // Will be generated by AuthenticationService.register()
      passwordSalt: '', // Will be generated by AuthenticationService.register()
      role: 'user',
      ...overrides,
    };
  }

  /**
   * Create test user credentials (for login testing)
   */
  static createTestCredentials(overrides?: { username?: string; password?: string; email?: string }) {
    const uniqueId = uuidv4().slice(0, 8);

    return {
      username: overrides?.username ?? `testuser_${uniqueId}`,
      email: overrides?.email ?? `test_${uniqueId}@example.com`,
      password: overrides?.password ?? 'TestPassword123!', // Meets OWASP requirements
    };
  }

  /**
   * Create a batch of test users for bulk testing
   */
  static createTestUsers(count: number): CreateUserInput[] {
    return Array.from({ length: count }, () => this.createTestUser());
  }

  /**
   * Create test user with weak password (for validation testing)
   */
  static createWeakPasswordCredentials() {
    return {
      username: `testuser_${uuidv4().slice(0, 8)}`,
      email: `test_${uuidv4().slice(0, 8)}@example.com`,
      password: 'Short1!', // Only 7 characters - fails OWASP requirement
    };
  }

  /**
   * Create test user with no uppercase (for validation testing)
   */
  static createNoUppercasePasswordCredentials() {
    return {
      username: `testuser_${uuidv4().slice(0, 8)}`,
      email: `test_${uuidv4().slice(0, 8)}@example.com`,
      password: 'nouppercase123!', // No uppercase letter
    };
  }

  /**
   * Create test user with no lowercase (for validation testing)
   */
  static createNoLowercasePasswordCredentials() {
    return {
      username: `testuser_${uuidv4().slice(0, 8)}`,
      email: `test_${uuidv4().slice(0, 8)}@example.com`,
      password: 'NOLOWERCASE123!', // No lowercase letter
    };
  }

  /**
   * Create test user with no number (for validation testing)
   */
  static createNoNumberPasswordCredentials() {
    return {
      username: `testuser_${uuidv4().slice(0, 8)}`,
      email: `test_${uuidv4().slice(0, 8)}@example.com`,
      password: 'NoNumbersHere!', // No numbers
    };
  }
}

/**
 * Session Factory for testing session management
 */
export class SessionFactory {
  /**
   * Create a valid session for testing
   */
  static createTestSession(userId: number, overrides?: Partial<CreateSessionInput>): CreateSessionInput {
    const sessionId = uuidv4();
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours from now

    return {
      id: sessionId,
      userId,
      expiresAt: expiresAt.toISOString(),
      rememberMe: false,
      ipAddress: '127.0.0.1',
      userAgent: 'Mozilla/5.0 (Test)',
      ...overrides,
    };
  }

  /**
   * Create an expired session for testing expiration logic
   */
  static createExpiredSession(userId: number): CreateSessionInput {
    const sessionId = uuidv4();
    const expiresAt = new Date(Date.now() - 1 * 60 * 60 * 1000); // 1 hour ago

    return {
      id: sessionId,
      userId,
      expiresAt: expiresAt.toISOString(),
      rememberMe: false,
    };
  }

  /**
   * Create a Remember Me session (30 days expiration)
   */
  static createRememberMeSession(userId: number): CreateSessionInput {
    const sessionId = uuidv4();
    const expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days from now

    return {
      id: sessionId,
      userId,
      expiresAt: expiresAt.toISOString(),
      rememberMe: true,
      ipAddress: '127.0.0.1',
      userAgent: 'Mozilla/5.0 (Test)',
    };
  }

  /**
   * Create multiple sessions for the same user (for testing concurrent sessions)
   */
  static createMultipleSessions(userId: number, count: number): CreateSessionInput[] {
    return Array.from({ length: count }, () => this.createTestSession(userId));
  }
}

/**
 * Mock data generators for testing
 */
export class MockDataGenerator {
  /**
   * Generate a valid email address
   */
  static generateEmail(): string {
    return `test_${uuidv4().slice(0, 8)}@example.com`;
  }

  /**
   * Generate a valid username
   */
  static generateUsername(): string {
    return `testuser_${uuidv4().slice(0, 8)}`;
  }

  /**
   * Generate a strong password (meets OWASP requirements)
   */
  static generateStrongPassword(): string {
    const length = 16;
    const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const lowercase = 'abcdefghijklmnopqrstuvwxyz';
    const numbers = '0123456789';
    const special = '!@#$%^&*()_+-=[]{}|;:,.<>?';

    // Ensure at least one of each required character type
    let password = '';
    password += uppercase[Math.floor(Math.random() * uppercase.length)];
    password += lowercase[Math.floor(Math.random() * lowercase.length)];
    password += numbers[Math.floor(Math.random() * numbers.length)];
    password += special[Math.floor(Math.random() * special.length)];

    // Fill remaining characters randomly
    const allChars = uppercase + lowercase + numbers + special;
    for (let i = password.length; i < length; i++) {
      password += allChars[Math.floor(Math.random() * allChars.length)];
    }

    // Shuffle the password to randomize character positions
    return password
      .split('')
      .sort(() => Math.random() - 0.5)
      .join('');
  }

  /**
   * Generate a session ID (UUID v4)
   */
  static generateSessionId(): string {
    return uuidv4();
  }

  /**
   * Generate an IP address (for testing)
   */
  static generateIpAddress(): string {
    return `192.168.${Math.floor(Math.random() * 256)}.${Math.floor(Math.random() * 256)}`;
  }

  /**
   * Generate a user agent string (for testing)
   */
  static generateUserAgent(): string {
    const browsers = ['Chrome', 'Firefox', 'Safari', 'Edge'];
    const browser = browsers[Math.floor(Math.random() * browsers.length)];
    const version = Math.floor(Math.random() * 100) + 50;
    return `Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) ${browser}/${version}.0.0.0`;
  }
}

/**
 * Test user presets for common scenarios
 */
export const TestUsers = {
  /**
   * Valid test user with strong password
   */
  valid: () => UserFactory.createTestCredentials(),

  /**
   * Admin user
   */
  admin: () =>
    UserFactory.createTestCredentials({
      username: `admin_${uuidv4().slice(0, 8)}`,
      email: `admin_${uuidv4().slice(0, 8)}@example.com`,
    }),

  /**
   * User with weak password (for validation testing)
   */
  weakPassword: () => UserFactory.createWeakPasswordCredentials(),

  /**
   * User with no uppercase in password
   */
  noUppercase: () => UserFactory.createNoUppercasePasswordCredentials(),

  /**
   * User with no lowercase in password
   */
  noLowercase: () => UserFactory.createNoLowercasePasswordCredentials(),

  /**
   * User with no numbers in password
   */
  noNumbers: () => UserFactory.createNoNumberPasswordCredentials(),

  /**
   * Inactive user
   */
  inactive: () =>
    UserFactory.createTestUser({
      username: `inactive_${uuidv4().slice(0, 8)}`,
    }),
};

/**
 * Usage Examples:
 *
 * ```typescript
 * // Create a test user
 * const user = UserFactory.createTestUser();
 *
 * // Create test credentials for registration
 * const credentials = UserFactory.createTestCredentials();
 * await authService.register(credentials.username, credentials.password, credentials.email);
 *
 * // Create a test session
 * const session = SessionFactory.createTestSession(user.id);
 *
 * // Create an expired session
 * const expiredSession = SessionFactory.createExpiredSession(user.id);
 *
 * // Generate strong password
 * const password = MockDataGenerator.generateStrongPassword();
 *
 * // Use presets
 * const validUser = TestUsers.valid();
 * const adminUser = TestUsers.admin();
 * const weakPasswordUser = TestUsers.weakPassword();
 * ```
 */
