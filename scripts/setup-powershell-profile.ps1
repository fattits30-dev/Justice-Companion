# ========================================
# Justice Companion - PowerShell Profile Setup
# Phase 4: PowerShell Enhancement Script
# ========================================

Write-Host "Phase 4: PowerShell Profile Enhancement Starting..." -ForegroundColor Cyan

# Get profile path
$profilePath = $PROFILE
Write-Host "`n[INFO] PowerShell profile location: $profilePath" -ForegroundColor Yellow

# Create profile directory if it doesn't exist
$profileDir = Split-Path -Parent $profilePath
if (!(Test-Path -Path $profileDir)) {
    Write-Host "[1/4] Creating PowerShell profile directory..." -ForegroundColor Yellow
    New-Item -ItemType Directory -Path $profileDir -Force | Out-Null
    Write-Host "[OK] Profile directory created" -ForegroundColor Green
} else {
    Write-Host "[1/4] Profile directory exists" -ForegroundColor Green
}

# Backup existing profile if it exists
if (Test-Path -Path $profilePath) {
    Write-Host "`n[2/4] Backing up existing profile..." -ForegroundColor Yellow
    $backupPath = "$profilePath.backup.$(Get-Date -Format 'yyyyMMdd-HHmmss')"
    Copy-Item -Path $profilePath -Destination $backupPath
    Write-Host "[OK] Backup created: $backupPath" -ForegroundColor Green
} else {
    Write-Host "`n[2/4] No existing profile to backup" -ForegroundColor Yellow
}

# Create the PowerShell profile
Write-Host "`n[3/4] Creating PowerShell profile..." -ForegroundColor Yellow

$profileContent = @'
# ========================================
# Justice Companion Development Profile
# Auto-generated by Phase 4 setup
# ========================================

# Performance tracking
$ProfileStart = Get-Date

# ========================================
# Oh My Posh Configuration
# ========================================
# Uncomment after installing Oh My Posh:
# oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\jandedobbeleer.omp.json" | Invoke-Expression

# Alternative themes (uncomment one):
# oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\night-owl.omp.json" | Invoke-Expression
# oh-my-posh init pwsh --config "$env:POSH_THEMES_PATH\powerlevel10k_rainbow.omp.json" | Invoke-Expression

# ========================================
# Terminal Icons
# ========================================
# Uncomment after installing Terminal-Icons:
# Import-Module -Name Terminal-Icons

# ========================================
# PSReadLine Configuration
# ========================================
# Enhanced command-line editing experience
if (Get-Module -ListAvailable -Name PSReadLine) {
    Import-Module PSReadLine

    # Predictive IntelliSense (command suggestions)
    Set-PSReadLineOption -PredictionSource HistoryAndPlugin
    Set-PSReadLineOption -PredictionViewStyle ListView

    # Editing mode
    Set-PSReadLineOption -EditMode Windows

    # Key bindings
    Set-PSReadLineKeyHandler -Key Tab -Function MenuComplete
    Set-PSReadLineKeyHandler -Key UpArrow -Function HistorySearchBackward
    Set-PSReadLineKeyHandler -Key DownArrow -Function HistorySearchForward

    # Colors
    Set-PSReadLineOption -Colors @{
        Command            = 'Yellow'
        Parameter          = 'Green'
        Operator           = 'Magenta'
        Variable           = 'White'
        String             = 'Cyan'
        Number             = 'Blue'
        Type               = 'Gray'
        Comment            = 'DarkGray'
        InlinePrediction   = 'DarkGray'
    }
}

# ========================================
# Git Integration (posh-git)
# ========================================
# Uncomment after installing posh-git:
# Import-Module posh-git

# ========================================
# Useful Aliases
# ========================================
Set-Alias -Name g -Value git -ErrorAction SilentlyContinue
Set-Alias -Name np -Value pnpm -ErrorAction SilentlyContinue

# ========================================
# Project Navigation Functions
# ========================================

# Navigate to Justice Companion project
function jc {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Navigated to Justice Companion project" -ForegroundColor Green
}

# Navigate to Desktop
function desk {
    Set-Location "C:\Users\sava6\Desktop"
}

# Start development server
function dev {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Starting development server..." -ForegroundColor Cyan
    pnpm run dev
}

# Run build
function build {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Building project..." -ForegroundColor Cyan
    pnpm run build
}

# Run tests
function test {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Running tests..." -ForegroundColor Cyan
    pnpm test
}

# ========================================
# Git Shortcut Functions
# ========================================

# Git status
function gs {
    git status
}

# Git add all
function ga {
    git add .
    Write-Host "Staged all changes" -ForegroundColor Green
}

# Git commit with message
function gc {
    param([string]$message)
    if ($message) {
        git commit -m $message
    } else {
        git commit
    }
}

# Git push
function gp {
    git push
}

# Git pull
function gpl {
    git pull
}

# Git log (last 10 commits, formatted)
function gl {
    git log --oneline --graph --decorate -10
}

# Git log all (last 20 commits)
function gla {
    git log --oneline --graph --decorate --all -20
}

# Git branch list
function gb {
    git branch -v
}

# Git checkout
function gco {
    param([string]$branch)
    git checkout $branch
}

# ========================================
# Development Utility Functions
# ========================================

# Quick pnpm install
function pi {
    Write-Host "Installing dependencies with pnpm..." -ForegroundColor Cyan
    pnpm install
}

# Type check
function tc {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Running TypeScript type check..." -ForegroundColor Cyan
    pnpm run type-check
}

# Lint
function lint {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Running ESLint..." -ForegroundColor Cyan
    pnpm run lint
}

# Format code
function fmt {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Formatting code with Prettier..." -ForegroundColor Cyan
    pnpm run format
}

# Run guard (quality checks)
function guard {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Running guard quality checks..." -ForegroundColor Cyan
    pnpm run guard:once
}

# Clean node_modules and reinstall
function clean {
    Set-Location "C:\Users\sava6\Desktop\Justice Companion"
    Write-Host "Cleaning node_modules..." -ForegroundColor Yellow
    Remove-Item -Recurse -Force node_modules -ErrorAction SilentlyContinue
    Write-Host "Reinstalling dependencies..." -ForegroundColor Cyan
    pnpm install
}

# ========================================
# System Utilities
# ========================================

# Open current directory in VS Code
function c {
    code .
}

# Open current directory in File Explorer
function ex {
    explorer .
}

# List directory with colors (if Terminal-Icons installed)
function ll {
    Get-ChildItem | Format-Table -AutoSize
}

# Find file by name
function ff {
    param([string]$name)
    Get-ChildItem -Recurse -Filter "*$name*" -ErrorAction SilentlyContinue
}

# ========================================
# Welcome Message
# ========================================
$ProfileEnd = Get-Date
$LoadTime = [math]::Round(($ProfileEnd - $ProfileStart).TotalMilliseconds)

Write-Host ""
Write-Host "========================================" -ForegroundColor Cyan
Write-Host " Justice Companion Development Profile" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host "[OK] Profile loaded in ${LoadTime}ms" -ForegroundColor Green
Write-Host "[INFO] Current directory: $(Get-Location)" -ForegroundColor White
Write-Host ""
Write-Host "Quick Commands:" -ForegroundColor Cyan
Write-Host "  jc      - Navigate to Justice Companion project" -ForegroundColor White
Write-Host "  dev     - Start development server" -ForegroundColor White
Write-Host "  build   - Build project" -ForegroundColor White
Write-Host "  test    - Run tests" -ForegroundColor White
Write-Host "  gs      - Git status" -ForegroundColor White
Write-Host "  ga      - Git add all" -ForegroundColor White
Write-Host "  gc 'msg'- Git commit with message" -ForegroundColor White
Write-Host "  gp      - Git push" -ForegroundColor White
Write-Host "  gl      - Git log (last 10)" -ForegroundColor White
Write-Host "  pi      - pnpm install" -ForegroundColor White
Write-Host "  tc      - Type check" -ForegroundColor White
Write-Host "  lint    - Run ESLint" -ForegroundColor White
Write-Host "  guard   - Run quality checks" -ForegroundColor White
Write-Host ""
'@

# Write the profile
Set-Content -Path $profilePath -Value $profileContent -Force
Write-Host "[OK] PowerShell profile created at: $profilePath" -ForegroundColor Green

# Test the profile
Write-Host "`n[4/4] Testing profile..." -ForegroundColor Yellow
try {
    . $profilePath
    Write-Host "[OK] Profile loaded successfully" -ForegroundColor Green
} catch {
    Write-Host "[WARN] Profile created but encountered error loading: $_" -ForegroundColor Yellow
    Write-Host "       This is normal if Oh My Posh or other modules aren't installed yet" -ForegroundColor Yellow
}

# Instructions
Write-Host "`n========================================" -ForegroundColor Cyan
Write-Host " Installation Instructions" -ForegroundColor Yellow
Write-Host "========================================" -ForegroundColor Cyan
Write-Host ""
Write-Host "To complete Phase 4 setup, install these tools:" -ForegroundColor White
Write-Host ""
Write-Host "1. Oh My Posh (git-aware prompt with themes):" -ForegroundColor Cyan
Write-Host "   winget install JanDeDobbeleer.OhMyPosh" -ForegroundColor White
Write-Host ""
Write-Host "2. PSReadLine (command predictions - usually pre-installed):" -ForegroundColor Cyan
Write-Host "   Install-Module PSReadLine -AllowPrerelease -Scope CurrentUser -Force" -ForegroundColor White
Write-Host ""
Write-Host "3. Terminal-Icons (file type icons):" -ForegroundColor Cyan
Write-Host "   Install-Module -Name Terminal-Icons -Repository PSGallery -Scope CurrentUser -Force" -ForegroundColor White
Write-Host ""
Write-Host "4. posh-git (advanced git features - optional):" -ForegroundColor Cyan
Write-Host "   Install-Module posh-git -Scope CurrentUser -Force" -ForegroundColor White
Write-Host ""
Write-Host "5. Cascadia Code Nerd Font (for special symbols):" -ForegroundColor Cyan
Write-Host "   winget install Microsoft.CascadiaCode" -ForegroundColor White
Write-Host "   OR download from: https://www.nerdfonts.com/font-downloads" -ForegroundColor White
Write-Host ""
Write-Host "After installing, edit the profile to uncomment the import lines:" -ForegroundColor Yellow
Write-Host "   code `$PROFILE" -ForegroundColor White
Write-Host ""
Write-Host "[SUCCESS] Phase 4 setup complete!" -ForegroundColor Green
Write-Host "Restart PowerShell to apply changes" -ForegroundColor Yellow
Write-Host ""
