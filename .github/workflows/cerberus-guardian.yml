name: 🐺 Cerberus Code Guardian

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

# Allow workflow to read contents for cross-repo operations
permissions:
  contents: read

jobs:
  cerberus-scan:
    runs-on: ubuntu-latest

    steps:
    - name: 📦 Checkout Justice Companion Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 🐺 Install Cerberus Guardian
      run: |
        echo "🐺 Installing Cerberus from GitHub..."
        git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/fattits30-dev/cerberus-code-guardian.git /tmp/cerberus
        cd /tmp/cerberus
        pip install -r requirements.txt
        echo "✅ Cerberus installed!"

    - name: 📋 Copy Cerberus Config
      run: |
        # Create config for Justice Companion
        cat > /tmp/cerberus/config.yaml << 'EOF'
        guardian:
          mode: continuous

          llm:
            provider: gemini  # Use free Gemini for CI
            gemini_api_key: "env:GOOGLE_API_KEY"
            gemini_model: gemini-2.5-flash

            use_free_tier: true
            free_tier_provider: gemini

            temperature: 0.1
            max_tokens: 2048

          first_run:
            enabled: false  # Skip first run in CI

          monitoring:
            batch_mode: false

          fix_strategy:
            hybrid_mode: true
            safe_auto_apply: true
            safe_types: ['linting', 'formatting']
            risky_report_only: true

          reporting:
            enabled: true
            format: markdown
            output_dir: .guardian/reports
        EOF

    - name: 🔍 Run Cerberus Scan
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        HF_API_KEY: ${{ secrets.HF_API_KEY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "🔍 Scanning Justice Companion..."
        cd /tmp/cerberus

        # Run targeted scan on Justice Companion
        python << 'PYTHON_SCRIPT'
        import sys
        from pathlib import Path
        sys.path.insert(0, '/tmp/cerberus')

        from guardian.config import GuardianConfig
        from guardian.first_run import FirstRunScanner

        print("Loading config...")
        config = GuardianConfig.from_yaml('config.yaml')

        print("Scanning Justice Companion...")
        justice_path = Path('${{ github.workspace }}')

        scanner = FirstRunScanner(config, justice_path)
        files = scanner.get_all_source_files()

        print(f"Found {len(files)} files to scan")

        # Scan first 100 files (for speed in CI)
        for i, file in enumerate(files[:100]):
            result = scanner.scan_file(file)
            if i % 10 == 0:
                print(f"Scanned {i}/{min(100, len(files))} files...")

        print(f"\nScan complete!")
        print(f"Files scanned: {scanner.stats['files_scanned']}")
        print(f"Files fixed: {scanner.stats['files_fixed']}")
        print(f"Simple fixes: {scanner.stats['simple_fixes']}")
        print(f"Serious issues: {scanner.stats['serious_issues']}")
        PYTHON_SCRIPT

    - name: 📊 Upload Scan Report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cerberus-report
        path: ${{ github.workspace }}/.guardian/reports/
        retention-days: 30

  cerberus-auto-fix:
    runs-on: ubuntu-latest
    needs: cerberus-scan
    if: github.event_name == 'pull_request'

    permissions:
      contents: write
      pull-requests: write

    steps:
    - name: 📦 Checkout Code
      uses: actions/checkout@v4
      with:
        ref: ${{ github.head_ref }}
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: 🐺 Install Cerberus Guardian
      run: |
        git clone https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/fattits30-dev/cerberus-code-guardian.git /tmp/cerberus
        cd /tmp/cerberus
        pip install -r requirements.txt

    - name: 🔧 Auto-Fix Simple Issues
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}
      run: |
        echo "🔧 Auto-fixing simple issues (linting, formatting)..."
        cd /tmp/cerberus

        # Use hybrid engine to fix simple issues only
        python << 'PYTHON_SCRIPT'
        import sys
        from pathlib import Path
        sys.path.insert(0, '/tmp/cerberus')

        from guardian.hybrid_engine import HybridFixEngine

        engine = HybridFixEngine()
        justice_path = Path('${{ github.workspace }}')

        # Fix Python and TypeScript files
        for ext in ['.py', '.js', '.ts', '.tsx']:
            for file in justice_path.rglob(f'*{ext}'):
                if any(skip in file.parts for skip in ['node_modules', '.git', 'dist']):
                    continue

                try:
                    content = file.read_text(encoding='utf-8')

                    # Simple linting issues
                    issues = [{'type': 'linting'}]
                    result = engine.apply_fixes(str(file), content, issues)

                    if result.get('success') and result.get('fixed_content'):
                        file.write_text(result['fixed_content'], encoding='utf-8')
                        print(f"Fixed: {file.relative_to(justice_path)}")

                except Exception as e:
                    pass

        stats = engine.get_stats()
        print(f"\n✅ Fixes applied: {stats['rule_based_fixes']}")
        print(f"💰 Cost saved: ${stats['cost_saved']:.2f}")
        PYTHON_SCRIPT

    - name: 📤 Commit Fixes
      run: |
        git config --local user.email "cerberus@github-actions.bot"
        git config --local user.name "Cerberus Guardian"

        if [[ -n $(git status -s) ]]; then
          git add .
          git commit -m "🐺 Cerberus: Auto-fix code quality issues

          - Fixed linting issues
          - Applied formatting
          - Improved code quality

          🤖 Generated with Cerberus Code Guardian
          https://github.com/fattits30-dev/cerberus-code-guardian"
          git push

          echo "✅ Fixes committed and pushed!"
        else
          echo "✅ No fixes needed!"
        fi

  cerberus-comment:
    runs-on: ubuntu-latest
    needs: cerberus-scan
    if: github.event_name == 'pull_request'

    permissions:
      pull-requests: write

    steps:
    - name: 💬 Comment on PR
      uses: actions/github-script@v7
      with:
        script: |
          const comment = `## 🐺 Cerberus Guardian Report

          ✅ **Code Quality Scan Complete**

          Your code has been scanned by [Cerberus Code Guardian](https://github.com/fattits30-dev/cerberus-code-guardian)!

          ### What Was Checked:
          - ✅ Linting & formatting
          - ✅ Code complexity
          - ✅ Security vulnerabilities
          - ✅ TypeScript errors

          ### Results:
          - Simple issues were auto-fixed
          - Serious issues are flagged in the report
          - See the full report in Actions artifacts

          ### Next Steps:
          1. Review the auto-fixes in this PR
          2. Check the scan report for serious issues
          3. Address any security concerns before merging

          ---
          🤖 Powered by Cerberus - Your autonomous code guardian
          💰 Cost: $0.00 (100% FREE with Gemini)`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
