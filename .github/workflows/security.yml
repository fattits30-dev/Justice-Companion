name: Security Scanning

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [main]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:  # Manual trigger

env:
  NODE_VERSION: '20.18.0'
  PNPM_VERSION: '9.15.0'

jobs:
  # Dependency vulnerability scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    permissions:
      security-events: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # npm audit
      - name: Run npm audit
        run: |
          echo "## NPM Audit Report" > audit-report.md
          pnpm audit --json > audit.json || true
          pnpm audit >> audit-report.md || true

          CRITICAL=$(cat audit.json | jq '.metadata.vulnerabilities.critical // 0')
          HIGH=$(cat audit.json | jq '.metadata.vulnerabilities.high // 0')
          MODERATE=$(cat audit.json | jq '.metadata.vulnerabilities.moderate // 0')
          LOW=$(cat audit.json | jq '.metadata.vulnerabilities.low // 0')

          echo "ðŸ”’ Security Audit Results:"
          echo "  - Critical: $CRITICAL"
          echo "  - High: $HIGH"
          echo "  - Moderate: $MODERATE"
          echo "  - Low: $LOW"

          if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
            echo "::warning::Found $CRITICAL critical and $HIGH high severity vulnerabilities"
          fi

      # Trivy filesystem scan
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      # Snyk scanning (optional - requires SNYK_TOKEN)
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Secret scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for complete scan

      - name: GitLeaks secret detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: TruffleHog secret scanning
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD

  # SAST (Static Application Security Testing)
  sast:
    name: SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    permissions:
      security-events: write
      actions: read
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          queries: security-extended

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check licenses
        run: |
          echo "## License Compliance Report" > license-report.md
          npx license-checker --summary --production >> license-report.md

          # Check for problematic licenses
          FORBIDDEN_LICENSES="GPL|AGPL|LGPL|SSPL"
          if npx license-checker --summary --production | grep -E "$FORBIDDEN_LICENSES"; then
            echo "::error::Found forbidden licenses: $FORBIDDEN_LICENSES"
            exit 1
          fi

          echo "âœ… All licenses are compliant"

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.md

  # SBOM (Software Bill of Materials) generation
  sbom:
    name: Generate SBOM
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Generate SBOM (CycloneDX format)
        run: |
          npx @cyclonedx/cyclonedx-npm --output-file sbom.json
          echo "âœ… SBOM generated successfully"

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.json

  # Docker image scanning (if using Docker)
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: false  # Enable when Docker images are used

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t justice-companion:latest .

      - name: Run Trivy container scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'justice-companion:latest'
          format: 'sarif'
          output: 'trivy-container-results.sarif'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-container-results.sarif'

  # Security summary report
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast, license-check, sbom]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate security summary
        run: |
          echo "## ðŸ”’ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SAST Analysis | ${{ needs.sast.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SBOM Generation | ${{ needs.sbom.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View detailed results in the **Security** tab." >> $GITHUB_STEP_SUMMARY
