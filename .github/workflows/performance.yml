name: Performance Monitoring

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run performance benchmarks weekly
    - cron: '0 3 * * 0'
  workflow_dispatch:

env:
  NODE_VERSION: '20.18.0'
  PNPM_VERSION: '9.15.0'

jobs:
  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Rebuild for Node.js
        run: pnpm rebuild:node

      # Database performance benchmarks
      - name: Database performance tests
        run: |
          echo "## 🚀 Database Performance Benchmarks" > benchmark-report.md
          echo "" >> benchmark-report.md

          # Create test script
          cat > benchmark-db.ts << 'EOF'
          import Database from 'better-sqlite3';
          import { performance } from 'perf_hooks';

          const db = new Database(':memory:');

          // Create test table
          db.exec(`
            CREATE TABLE test_cases (
              id INTEGER PRIMARY KEY,
              title TEXT,
              description TEXT,
              status TEXT,
              created_at INTEGER
            );
          `);

          // Insert benchmark
          console.log('### Insert Performance');
          const insertStart = performance.now();
          const insert = db.prepare('INSERT INTO test_cases (title, description, status, created_at) VALUES (?, ?, ?, ?)');
          const insertMany = db.transaction((cases) => {
            for (const c of cases) insert.run(c.title, c.description, c.status, Date.now());
          });

          const testCases = Array.from({ length: 1000 }, (_, i) => ({
            title: `Case ${i}`,
            description: `Description for case ${i}`.repeat(10),
            status: 'open'
          }));

          insertMany(testCases);
          const insertTime = performance.now() - insertStart;
          console.log(`- Inserted 1000 records: ${insertTime.toFixed(2)}ms`);
          console.log(`- Average: ${(insertTime / 1000).toFixed(3)}ms per record`);

          // Query benchmark
          console.log('\n### Query Performance');
          const queryStart = performance.now();
          const result = db.prepare('SELECT * FROM test_cases WHERE status = ?').all('open');
          const queryTime = performance.now() - queryStart;
          console.log(`- Queried ${result.length} records: ${queryTime.toFixed(2)}ms`);

          // Pagination benchmark
          console.log('\n### Pagination Performance');
          const pageStart = performance.now();
          const page = db.prepare('SELECT * FROM test_cases LIMIT ? OFFSET ?').all(20, 0);
          const pageTime = performance.now() - pageStart;
          console.log(`- Paginated query (20 records): ${pageTime.toFixed(2)}ms`);

          db.close();
          EOF

          npx tsx benchmark-db.ts >> benchmark-report.md

      # Encryption performance benchmarks
      - name: Encryption performance tests
        run: |
          cat >> benchmark-report.md << 'EOF'

          ## 🔐 Encryption Performance Benchmarks

          EOF

          cat > benchmark-encryption.ts << 'EOF'
          import crypto from 'crypto';
          import { performance } from 'perf_hooks';

          const key = crypto.randomBytes(32);
          const testData = 'Sensitive legal data '.repeat(100);

          console.log('### AES-256-GCM Encryption');

          // Encryption benchmark
          const iterations = 1000;
          const encryptStart = performance.now();

          for (let i = 0; i < iterations; i++) {
            const iv = crypto.randomBytes(12);
            const cipher = crypto.createCipheriv('aes-256-gcm', key, iv);
            const encrypted = Buffer.concat([cipher.update(testData, 'utf8'), cipher.final()]);
            const tag = cipher.getAuthTag();
          }

          const encryptTime = performance.now() - encryptStart;
          console.log(`- ${iterations} encryptions: ${encryptTime.toFixed(2)}ms`);
          console.log(`- Average: ${(encryptTime / iterations).toFixed(3)}ms per operation`);
          console.log(`- Throughput: ${((testData.length * iterations) / encryptTime * 1000 / 1024 / 1024).toFixed(2)} MB/s`);

          EOF

          npx tsx benchmark-encryption.ts >> benchmark-report.md

      # Bundle size analysis
      - name: Analyze bundle size
        run: |
          pnpm build:electron

          echo "" >> benchmark-report.md
          echo "## 📦 Bundle Size Analysis" >> benchmark-report.md
          echo "" >> benchmark-report.md
          echo "| Artifact | Size |" >> benchmark-report.md
          echo "|----------|------|" >> benchmark-report.md

          MAIN_SIZE=$(du -h dist/electron/main.js | cut -f1)
          PRELOAD_SIZE=$(du -h dist/electron/preload.js | cut -f1)
          RENDERER_SIZE=$(du -h dist/assets/*.js | head -1 | cut -f1)
          TOTAL_SIZE=$(du -sh dist | cut -f1)

          echo "| Main Process | $MAIN_SIZE |" >> benchmark-report.md
          echo "| Preload Script | $PRELOAD_SIZE |" >> benchmark-report.md
          echo "| Renderer Bundle | $RENDERER_SIZE |" >> benchmark-report.md
          echo "| **Total** | **$TOTAL_SIZE** |" >> benchmark-report.md

      # Memory usage analysis
      - name: Memory usage tests
        run: |
          cat >> benchmark-report.md << 'EOF'

          ## 💾 Memory Usage Analysis

          EOF

          cat > benchmark-memory.ts << 'EOF'
          import Database from 'better-sqlite3';
          import { performance } from 'perf_hooks';

          const formatMemory = (bytes: number) => `${(bytes / 1024 / 1024).toFixed(2)} MB`;

          console.log('### Database Memory Usage');

          const memStart = process.memoryUsage();
          const db = new Database(':memory:');

          db.exec(`
            CREATE TABLE large_table (
              id INTEGER PRIMARY KEY,
              data TEXT
            );
          `);

          // Insert 10k records
          const insert = db.prepare('INSERT INTO large_table (data) VALUES (?)');
          const insertMany = db.transaction((items) => {
            for (const item of items) insert.run(item);
          });

          const largeData = Array.from({ length: 10000 }, (_, i) => `Large data ${i}`.repeat(50));
          insertMany(largeData);

          const memAfter = process.memoryUsage();

          console.log(`- Heap used: ${formatMemory(memAfter.heapUsed - memStart.heapUsed)}`);
          console.log(`- RSS: ${formatMemory(memAfter.rss - memStart.rss)}`);

          db.close();
          EOF

          npx tsx benchmark-memory.ts >> benchmark-report.md

      # Upload benchmark report
      - name: Upload benchmark report
        uses: actions/upload-artifact@v4
        with:
          name: performance-benchmarks
          path: benchmark-report.md

      # Comment on PR with results
      - name: Comment PR with benchmarks
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('benchmark-report.md', 'utf8');

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });

  # Load testing
  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    timeout-minutes: 20
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run load tests
        run: |
          echo "⚠️ Load testing not yet implemented"
          echo "TODO: Implement load tests for:"
          echo "  - Concurrent database operations"
          echo "  - Large file imports"
          echo "  - Search with large datasets"
          echo "  - AI chat with multiple concurrent requests"

  # Startup performance
  startup-performance:
    name: Application Startup Performance
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build:electron

      - name: Measure startup time
        run: |
          echo "## ⚡ Startup Performance" > startup-report.md
          echo "" >> startup-report.md

          # Use demo-startup-metrics.js script
          if [ -f "scripts/demo-startup-metrics.js" ]; then
            node scripts/demo-startup-metrics.js >> startup-report.md
          else
            echo "⚠️ Startup metrics script not found" >> startup-report.md
          fi

      - name: Upload startup report
        uses: actions/upload-artifact@v4
        with:
          name: startup-performance
          path: startup-report.md
