{
  "description": "Claude Code Security Hooks - Justice Companion",
"inputPrefix": "# Justice Companion Development Protocol\n\n## Core Expectations\n- Respect the safeguarded paths listed in `rules.protectedPaths`.\n- Keep work focused: plan briefly, then implement and verify.\n- Default to deterministic tooling; call AI tools only when automation or static analysis cannot complete the task.\n\n## Guarded Workflow\nWhenever you modify application code:\n1. Run the lightweight guard pipeline: `npm run guard` (continuous) or `npm run guard:once` (single pass).\n2. Confirm TypeScript, ESLint, and `npm test -- --run` all succeed before shipping changes.\n3. Capture the commands you executed and their outcomes in your handoff notes.\n\n## Planning Checklist\nBefore editing:\n- Review related files and recent changes in the same module.\n- Identify data flow, error handling, and security touch points.\n- Note required updates to docs, configuration, and tests.\n\n## Implementation Checklist\n- Preserve TypeScript strictness (no `any`, `unknown` only with justification).\n- Keep functions small and observable with clear logging where appropriate.\n- Prefer existing utilities/hooks/services before introducing new abstractions.\n- Ensure new configuration toggles default to safe, off, or backward-compatible values.\n\n## Verification Checklist\n- Type check, lint, and test via the guard pipeline.\n- For UI work, exercise critical flows manually or via Playwright where feasible.\n- For database changes, run migrations in a fresh environment and document rollback steps.\n- Update documentation (`AGENTS.md`, `docs/`, README files) when behavior or setup changes.\n\n## Collaboration Notes\n- Summaries must include: scope, commands run, outstanding risks, next steps.\n- If a task spans multiple agents, clearly state ownership and dependencies.\n- Escalate blocking issues with precise error output and the command that triggered them.\n\n**USER REQUEST:**\n",
  "rules": {
    "protectedPaths": [
      "legal-docs/",
      ".env",
      ".env.local",
      "justice.db",
      "*.db",
      "logs/",
      "keys/",
      "*.key",
      "*.pem",
      "credentials.json",
      "secrets/"
    ],
    "autoFormat": true,
    "requireTests": true,
    "securityFirst": true
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "cmd",
            "args": ["/c", "C:\\Users\\sava6\\Desktop\\Justice Companion\\.claude\\marker-hook.bat"]
          }
        ]
      },
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "cmd",
            "args": ["/c", "C:\\Users\\sava6\\Desktop\\Justice Companion\\.claude\\marker-hook.bat"]
          }
        ]
      }
    ],
    "PostToolUse": []
  },
  "formatting": {
    "typescript": {
      "enabled": true,
      "tool": "prettier",
      "options": {
        "singleQuote": true,
        "semi": true,
        "tabWidth": 2,
        "trailingComma": "es5"
      }
    },
    "json": {
      "enabled": true,
      "tool": "prettier",
      "options": {
        "tabWidth": 2
      }
    },
    "markdown": {
      "enabled": true,
      "tool": "prettier",
      "options": {
        "proseWrap": "always"
      }
    }
  },
  "security": {
    "auditLog": {
      "enabled": true,
      "path": "logs/claude-code-audit.log",
      "logSensitiveOperations": true
    },
    "blockedPatterns": {
      "secrets": [
        "password\\s*=",
        "api_key\\s*=",
        "secret\\s*=",
        "token\\s*="
      ],
      "sensitiveData": [
        "ssn",
        "social_security",
        "credit_card",
        "passport"
      ]
    }
  },
  "reminders": {
    "beforeEdit": [
      "Confirm TypeScript strictness plan (no untyped values)",
      "Note which guard steps (type-check/lint/tests) must pass",
      "Identify required documentation or config updates",
      "Review sensitive-data handling for the affected feature"
    ],
    "beforeCommit": [
      "Run `npm run guard:once` and confirm all stages pass",
      "Verify there are no stray console/log statements or TODOs",
      "Ensure documentation and configuration changes are included",
      "Double-check that no secrets or tokens are present"
    ]
  }
}
